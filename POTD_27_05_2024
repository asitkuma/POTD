#bruteforce..
# def longest_subsequence(arr,dummy,l1):
#     if len(arr)==0:
#         if len(dummy)>l1[-1]:
#             l1.append(len(dummy))
#         return 
#     if len(dummy)==0 or abs(arr[0]-dummy[-1])==1:
#         dummy.append(arr[0])
#     longest_subsequence(arr[1:],dummy.copy(),l1)
#     dummy.pop()
#     longest_subsequence(arr[1:],dummy.copy(),l1)













from typing import List


class Solution:
    def longestSubseq(self, n : int, arr : List[int]) -> int:
        dp=[1]*n
        maxi=1
        for i in range(1,len(arr)):
            for j in range(i):
                if abs(arr[i]-arr[j])==1:
                    dp[i]=max(dp[i],dp[j]+1)
                    maxi=max(maxi,dp[i])
        return maxi




#{ 
 # Driver Code Starts
class IntArray:

    def __init__(self) -> None:
        pass

    def Input(self, n):
        arr = [int(i) for i in input().strip().split()]  #array input
        return arr

    def Print(self, arr):
        for i in arr:
            print(i, end=" ")
        print()


if __name__ == "__main__":
    t = int(input())
    for _ in range(t):

        n = int(input())

        a = IntArray().Input(n)

        obj = Solution()
        res = obj.longestSubseq(n, a)

        print(res)

# } Driver Code Ends
